{
  "version": 3,
  "file": "test_healthChecks.js",
  "sourceRoot": "../",
  "sources": [
    "test/test_healthChecks.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Import required packages\nnet   = require 'net'\nchai  = require 'chai'\nshoud = chai.should()\nexec  = require('child_process').execSync\n\n# Import test requirements\nHttpsServer  = require \"#{__dirname}/httpsServer\"\n\nChecker = require '../build/healthChecksExternal'\n\n# Allow self-signed for dev purpose\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0\n\nhost = 'localhost'\nport = 8000\n\n# Generate certificates\ntry\n    console.log \"Generate test certificates\"\n    exec \"#{__dirname}/certs_init.sh localhost password &>/dev/null\"\ncatch error\n    console.error \"Unable to generate certificates: #{error}\"\n\n# Instanciate test server HTTPSServer\nhttps_server = new HttpsServer(host, port)\n\n# Add client profile\nclient_keychain = {\n    key: \"#{__dirname}/certs/client/client.key\"\n    cert: \"#{__dirname}/certs/client/client.crt\"\n    ca: \"#{__dirname}/certs/ca/ca.crt\"\n}\n\n# Instanciate healthChecks object\nhealthChecks = new Checker()\ntry\n    raw = exec \"openssl x509 -enddate -noout -in #{__dirname}/certs/server/server.crt | cut -d '=' -f 2\"\n    server_expiration = \"#{raw}\".replace(/(\\r\\n|\\n|\\r)/gm, \"\")\ncatch error\n    console.error \"Unable to get server certificates expiration: #{error}\"\n\n###################### UNIT TESTS ##########################\ndescribe \"HealthChecks working tests\", ->\n\n    # Set global timeout\n    @timeout 4000\n\n    before( () ->\n\n        # Start server\n        console.log \"Start HTTPSServer\"\n        https_server.start()\n    )\n\n    after( () ->\n        # Stop server\n        console.log \"Stop HTTPSServer\"\n        https_server.stop()\n    )\n\n    it 'Check add profile', (done) ->\n        result = healthChecks.addProfile('client', client_keychain)\n        result.should.be.a 'boolean'\n        result.should.be.equal true\n        \n        done()\n    \n    it 'Check is profile set', (done) ->\n        result = healthChecks.isProfileSet('client')\n        result.should.be.a 'boolean'\n        result.should.be.equal true\n        \n        done()\n    \n    it 'Check is profile set failed', (done) ->\n        result = healthChecks.isProfileSet('test')\n        result.should.be.a 'boolean'\n        result.should.be.equal false\n        \n        done()\n    \n    it 'Check port open method', ->\n        data = await healthChecks.checkPortIsOpen( host, port )\n        data.should.be.a 'boolean'\n        data.should.be.equal true\n        \n    it 'Check port closed method', ->\n        data = await healthChecks.checkPortIsOpen( host, port+1 )\n        data.should.be.a 'boolean'\n        data.should.be.equal false\n        \n    it 'Check port latency method', ->\n        data = await healthChecks.checkPortLatency( 'api.ipify.org', 443 )\n        data.should.be.a 'number'\n        data.should.be.above 0\n        \n    it 'Check port closed latency method', ->\n        data = await healthChecks.checkPortLatency( host, port+1 )\n        data.should.be.a 'number'\n        data.should.be.equal -1\n        \n    it 'Check remote vhost certificate DN method', ->\n        data = await healthChecks.checkCertificateDN( host, port, null )\n        data.should.be.a 'string'\n        data.should.be.equal 'C=FR,ST=.,L=.,O=ACME Signing Authority Inc,CN=localhost'\n    \n    it 'Check remote peer certificate DN method', ->\n        data = await healthChecks.checkCertificateDN( host, port, 'client' )\n        data.should.be.a 'string'\n        data.should.be.equal 'C=FR,ST=.,L=.,O=ACME Signing Authority Inc,CN=localhost'\n    \n    it 'Check remote peer certificate issuer (1 node) method', ->\n        data = await healthChecks.checkCertificateIssuer( host, port, 'client' )\n        data.should.be.a 'array'\n        data[0].should.be.equal 'C=FR,ST=PACA,L=GAP,O=ACME Signing Authority Inc,CN=CA'\n    \n    it 'Check remote peer certificate expiration method', ->\n        data = await healthChecks.checkCertificateExpiration( host, port, 'client' )\n        data.should.be.a 'string'\n        data.should.be.equal server_expiration\n    \n    it 'Check remote peer certificate retrieval method', ->\n        raw = await healthChecks.checkRemoteCertificate( host, port, 'client' )\n        raw.should.be.an 'object'\n        # Rebuild standard object for mochai compliance\n        data = JSON.parse(JSON.stringify(raw))\n        data.subject.should.exist\n        data.issuer.should.exist\n        data.modulus.should.exist\n        data.exponent.should.exist\n        data.pubkey.should.exist\n        data.valid_from.should.exist\n        data.valid_to.should.exist\n        data.fingerprint.should.exist\n        data.serialNumber.should.exist\n    \n    it 'Check remote client authentication method', ->\n        data = await healthChecks.checkClientAuthentication( host, port, 'client' )\n        data.should.be.a 'boolean'\n        data.should.be.equal true\n    \n    it 'Check remote client authentication failed method', ->\n        data = await healthChecks.checkClientAuthentication( host, port )\n        data.should.be.a 'boolean'\n        data.should.be.equal false\n    \n    it 'Check API call method', ->\n        data = await healthChecks.checkAPICallContent( 'https://my-json-server.typicode.com/x42en/healthchecks/posts/1', 'GET' )\n        data.should.be.an 'object'\n        data.should.have.deep.property 'status'\n        data.should.have.deep.property 'data'\n        \n        data.status.should.be.equal 200\n        data.data.should.be.an 'object'\n        data.data.should.have.deep.property 'id'\n        data.data.should.have.deep.property 'title'\n        \n        data.data.id.should.be.equal 1\n        data.data.title.should.be.equal 'hello'\n    \n    it 'Check web page content method', ->\n        data = await healthChecks.checkWebPageContent( \"https://api.ipify.org/\", 'client' )\n        data.should.be.an 'object'\n        data.should.have.deep.property 'status'\n        data.should.have.deep.property 'data'\n        \n        data.status.should.be.equal 200\n        data.data.should.be.a 'string'\n        net.isIPv4(data.data).should.be.equal true\n"
  ]
}