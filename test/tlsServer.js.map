{
  "version": 3,
  "file": "tlsServer.js",
  "sourceRoot": "..",
  "sources": [
    "test/tlsServer.coffee"
  ],
  "names": [],
  "mappings": "AAA0B;EAAA;AAAA,MAAA,SAAA,EAAA,EAAA,EAAA;;EAC1B,EAAA,GAAM,OAAA,CAAQ,IAAR;;EACN,GAAA,GAAM,OAAA,CAAQ,KAAR;;EAEN,MAAM,CAAC,OAAP,GAAuB,YAAN,MAAA,UAAA;IACb,WAAa,CAAC,IAAD,EAAO,IAAP,EAAa,SAAO,IAApB,CAAA;MACT,IAAC,CAAA,OAAD,GAAW;QACP,IAAA,EAAM,IADC;QAEP,IAAA,EAAM,IAFC;QAIP,GAAA,EAAK,EAAE,CAAC,YAAH,CAAgB,CAAA,CAAA,CAAG,SAAH,CAAA,wBAAA,CAAhB,CAJE;QAKP,IAAA,EAAM,EAAE,CAAC,YAAH,CAAgB,CAAA,CAAA,CAAG,SAAH,CAAA,wBAAA,CAAhB,CALC;QAMP,EAAA,EAAI,EAAE,CAAC,YAAH,CAAgB,CAAA,CAAA,CAAG,SAAH,CAAA,gBAAA,CAAhB,CANG;QAQP,WAAA,EAAa,MARN;QASP,kBAAA,EAAoB,MATb;MAAA;IADF;;IAab,KAAO,CAAA,CAAA;MACH,IAAC,CAAA,MAAD,GAAU,GAAG,CAAC,YAAJ,CAAiB,IAAC,CAAA,OAAlB,EAA2B,CAAC,MAAD,CAAA,GAAA;QACjC,MAAM,CAAC,KAAP,CAAa,aAAb;QACA,MAAM,CAAC,WAAP,CAAmB,MAAnB;eACA,MAAM,CAAC,IAAP,CAAY,MAAZ;MAHiC,CAA3B;MAIV,IAAC,CAAA,MAAM,CAAC,EAAR,CAAW,YAAX,EAAyB,CAAC,CAAD,CAAA,GAAA,EAAA,CAAzB;MACA,IAAC,CAAA,MAAM,CAAC,EAAR,CAAW,kBAAX,EAA+B,CAAC,CAAD,CAAA,GAAA,EAAA,CAA/B;aACA,IAAC,CAAA,MAAM,CAAC,MAAR,CAAe,IAAC,CAAA,OAAO,CAAC,IAAxB,EAA8B,CAAA,CAAA,GAAA,EAAA,CAA9B;IAPG;;IASP,IAAM,CAAA,CAAA;aACF,IAAC,CAAA,MAAM,CAAC,KAAR,CAAA;IADE;;EAvBO;AAJS",
  "sourcesContent": [
    "# Import required packages\nfs  = require 'fs'\ntls = require 'tls'\n\nmodule.exports = class TLSServer\n    constructor: (host, port, secure=true)->\n        @options = {\n            host: host\n            port: port\n\n            key: fs.readFileSync(\"#{__dirname}/certs/server/server.key\")\n            cert: fs.readFileSync(\"#{__dirname}/certs/server/server.crt\")\n            ca: fs.readFileSync(\"#{__dirname}/certs/ca/ca.crt\")\n            \n            requestCert: secure, # Ask for a client cert\n            rejectUnauthorized: secure # Act on unauthorized clients at the app level\n        }\n    \n    start: ->\n        @server = tls.createServer @options, (socket) =>\n            socket.write \"welcome! \\n\"\n            socket.setEncoding 'utf8'\n            socket.pipe socket\n        @server.on 'connection', (c) =>\n        @server.on 'secureConnection', (c) =>\n        @server.listen @options.port, () =>\n    \n    stop: ->\n        @server.close()"
  ]
}