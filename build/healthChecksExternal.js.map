{
  "version": 3,
  "file": "healthChecksExternal.js",
  "sourceRoot": "..",
  "sources": [
    "src/healthChecksExternal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs    = require 'fs'\nnet   = require 'net'\nhttps = require 'https'\naxios = require 'axios'\n\nmodule.exports = class HealthChecks\n\n    # Setup vulners API key and profile attribute\n    constructor: (@config={vulners: null, profiles: {}}) ->\n\n    # Add TLS/SSLV profile\n    addProfile: (name, keychain) ->\n        try\n            @config.profiles[name] = {\n                rejectUnauthorized: false\n                key: fs.readFileSync keychain.key\n                cert: fs.readFileSync keychain.cert\n                ca: fs.readFileSync keychain.ca\n            }\n        catch error\n            throw error\n        \n        return true\n    \n    isProfileSet: (name) ->\n        return @config.profiles[name]?\n\n    # Check if remote port is open\n    _checkPort: (host, port) ->\n        return new Promise (resolve, reject) =>\n            # Check port is reachable\n            net_socket = net.Socket()\n            now = new Date().getTime()\n            onError = () =>\n                net_socket.destroy()\n                reject Error host\n\n            net_socket.setTimeout(1000)\n            .once('error', onError)\n            .once('timeout', onError)\n            .connect( port, host, () =>\n                # Auto close socket\n                net_socket.end()\n                latency = (new Date().getTime()) - now\n                resolve(latency)\n            )\n    \n    # Retrieve remote peer certificate (supporting vhosts)\n    _checkHTTPS: (vhost, port, profile_name) ->\n        return new Promise (resolve, reject) =>\n            config = {\n                host: vhost\n                port: port\n                method: 'get'\n                path: '/'\n                agent: false\n            }\n            secure = false\n\n            if profile_name of @config.profiles\n                secure = true\n                config.key = @config.profiles[profile_name].key\n                config.cert = @config.profiles[profile_name].cert\n                config.ca = @config.profiles[profile_name].ca\n\n            cert = null\n            isAuthorized = false\n            req = https.request config, (res) =>\n                cert = res.connection.getPeerCertificate()\n                isAuthorized = res.connection.authorized\n                return resolve { authorized: isAuthorized, certificate: cert }\n            .on 'error', (err) =>\n                console.error(\"HTTPS Error: #{err.response.data}\")\n                return reject(err.response.data)\n            \n            req.end()\n\n    # Execute web request upon host\n    _request: (url, method, data, profile_name, json=false) ->\n        if not method.toUpperCase() in ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS']\n            throw 'Sorry, unsupported method'\n\n        config = {\n            url: url\n            method: method\n            headers: {\n                'User-Agent': 'ProHacktive HealthChecks - Check https://github.com/ProHacktive for more infos'\n            }\n        }\n\n        if profile_name of @config.profiles\n            config.httpsAgent = new https.Agent(@config.profiles[profile_name])\n            \n        if data\n            config.data = data\n        \n        return axios(config)\n\n    # Check if a service port is open\n    # Return Boolean()\n    checkPortIsOpen: (host, port) ->\n        try\n            status = await @_checkPort host, port\n        catch err\n            return false\n\n        return Boolean(status)\n\n    # Check latency of a service port\n    # Return Number()\n    checkPortLatency: (host, port) ->\n        try\n            latency = await @_checkPort host, port\n        catch err\n            return -1\n        \n        return latency\n    \n    # Gather remote peer certificate's DN\n    checkCertificateDN: (host, port, profile_name=null) ->\n        try\n            dn = ''\n            # cert_infos = @_getCertificate host, port, profile_name\n            data = await @_checkHTTPS host, port, profile_name\n            # Rebuild DN\n            for k, v of data.certificate.subject\n                dn += \"#{k}=#{v},\"\n            dn = dn.slice(0, -1)\n        catch err\n            return new Error(err)\n\n        return dn\n    \n    # Gather remote peer certificate's issuer\n    checkCertificateIssuer: (host, port, profile_name=null) ->\n        try\n            issuers = []\n            dn = ''\n            data = await @_checkHTTPS host, port, profile_name\n            console.log data\n            # Rebuild DN\n            for k, v of data.certificate.issuer\n                dn += \"#{k}=#{v},\"\n            dn = dn.slice(0, -1)\n            # Add issuer to list\n            if dn not in issuers\n                issuers.push dn\n        catch err\n            return new Error(err)\n\n        return issuers\n    \n    # Gather remote peer certificate's expiration date\n    checkCertificateExpiration: (host, port, profile_name=null) ->\n        try\n            data = await @_checkHTTPS host, port, profile_name\n            console.log data\n        catch err\n            return new Error(err)\n\n        return data.certificate.valid_to\n    \n    # Gather remote peer certificate\n    checkRemoteCertificate: (host, port, profile_name=null) ->\n        try\n            data = await @_checkHTTPS host, port, profile_name\n        catch err\n            return new Error(err)\n        return data.certificate\n    \n    # Check if remote site has client authentication enforced\n    # return boolean()\n    checkClientAuthentication: (host, port, profile_name=null) ->\n        try\n            # Try a connection without profile\n            data = await @_checkHTTPS host, port, profile_name\n            return data.authorized\n        catch err\n            console.log \"Authentication error: #{err}\"\n            return true\n\n    # Return result of API call in json\n    checkAPICallContent: (url, method, data, profile_name=null) ->\n        # Enable JSON flag\n        try\n            infos = await @_request url, method, data, profile_name, true\n        catch err\n            return new Error(err)\n\n        return { status: infos.status, data: infos.data }\n\n    # Return result of web page request\n    checkWebPageContent: (url, profile_name=null) ->\n        try\n            infos = await @_request url, 'GET', null\n        catch err\n            return new Error(err)\n\n        return { status: infos.status, data: infos.data }\n\n    # Retrieve vulnerabilities based on app/version infos\n    # Based on vulners.io service (use config for API key)\n    checkVulnerabilities: (app, version) ->"
  ]
}