{
  "version": 3,
  "file": "healthChecksExternal.js",
  "sourceRoot": "..",
  "sources": [
    "src/healthChecksExternal.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs    = require 'fs'\nnet   = require 'net'\ntls   = require 'tls'\naxios = require 'axios'\n\nmodule.exports = class HealthChecks\n\n    # Setup vulners API key and profile attribute\n    constructor: (@config={vulners: null, profiles: {}}) ->\n\n    # Add TLS/SSLV profile\n    addProfile: (name, keychain) ->\n        try\n            @config.profiles[name] = {\n                key: fs.readFileSync keychain.key\n                cert: fs.readFileSync keychain.cert\n                ca: fs.readFileSync keychain.ca\n            }\n        catch error\n            throw error\n        \n        return true\n    \n    isProfileSet: (name) ->\n        return @config.profiles[name]?\n\n    # Check if remote port is open\n    _checkPort: (host, port) ->\n        return new Promise (resolve, reject) =>\n            # Check port is reachable\n            net_socket = net.Socket()\n            now = new Date().getTime()\n            onError = () =>\n                net_socket.destroy()\n                reject Error host\n\n            net_socket.setTimeout(1000)\n            .once('error', onError)\n            .once('timeout', onError)\n            .connect( port, host, () =>\n                # Auto close socket\n                net_socket.end()\n                latency = (new Date().getTime()) - now\n                resolve(latency)\n            )\n    \n    # Retrieve remote peer certificate\n    _checkTLS: (host, port, profile_name) ->\n        return new Promise (resolve, reject) =>\n            config = { \n                host: host\n                port: port\n            }\n            if profile_name of @config.profiles\n                config.key = @config.profiles[profile_name].key\n                config.cert = @config.profiles[profile_name].cert\n                config.ca = @config.profiles[profile_name].ca\n            \n            cert = null\n            isAuthorized = false\n            tlsSocket = tls.connect config, () =>\n                cert = tlsSocket.getPeerCertificate(true)\n                isAuthorized = tlsSocket.authorized\n                tlsSocket.end()\n                resolve { authorized: isAuthorized, certificate: cert }\n            .setEncoding 'utf8'\n            .on 'error', (error) =>\n                reject Error(error)\n    \n    # Execute web request upon host\n    _request: (url, method, data, profile_name, json=false) ->\n        if method not in ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS']\n            throw 'Sorry, unsupported method'\n\n        config = {\n            url: url\n            method: method\n            headers: {\n                'User-Agent': 'ProHacktive HealthChecks - Check https://github.com/ProHacktive for more infos'\n            }\n        }\n\n        if profile_name of @config.profiles\n            config.key = @config.profiles[profile_name].key\n            config.cert = @config.profiles[profile_name].cert\n            config.cacert = @config.profiles[profile_name].ca\n        \n        if data\n            config.data = data\n        \n        return axios(config)\n        \n\n    # Check if a service port is open\n    # Return Boolean()\n    checkPortIsOpen: (host, port) ->\n        port_status = @_checkPort host, port\n        await port_status.then () ->\n            return true\n        .catch ( error ) ->\n            return false\n    \n    # Check latency of a service port\n    # Return Number()\n    checkPortLatency: (host, port) ->\n        port_status = @_checkPort host, port\n        await port_status.then (latency) ->\n            return latency\n        .catch ( error ) ->\n            return -1\n\n    # Gather remote peer certificate's DN\n    checkCertificateDN: (host, port, profile_name=null) ->\n        tls_infos = @_checkTLS host, port, profile_name\n        await tls_infos.then (infos) ->\n            # Rebuild DN\n            dn = ''\n            for k, v of infos.certificate.subject\n                dn += \"#{k}=#{v},\"\n            \n            return dn.slice(0, -1)\n        .catch ( error ) ->\n            return Error error\n\n    # Gather remote peer certificate's issuer\n    checkCertificateIssuer: (host, port, profile_name=null) ->\n        tls_infos = @_checkTLS host, port, profile_name\n        await tls_infos.then (infos) ->\n            issuers = []\n            \n            # Rebuild DN\n            dn = ''\n            for k, v of infos.certificate.issuer\n                dn += \"#{k}=#{v},\"\n            \n            # Add issuer to list\n            if dn.slice(0, -1) not in issuers\n                issuers.push dn.slice(0, -1)\n            \n            return issuers\n        .catch ( error ) ->\n            return Error error\n    \n    # Gather remote peer certificate's expiration date\n    checkCertificateExpiration: (host, port, profile_name=null) ->\n        tls_infos = @_checkTLS host, port, profile_name\n        await tls_infos.then (infos) ->\n            return infos.certificate.valid_to\n        .catch ( error ) ->\n            return Error error\n    \n    # Return result of API call in json\n    checkAPICallContent: (url, method, data, profile_name=null) ->\n        # Enable JSON flag\n        api_infos = @_request url, method, data, profile_name, true\n        await api_infos.then (infos) ->\n            return { status: infos.status, data: infos.data }\n        .catch ( error ) ->\n            return null\n\n    # Return result of web page request\n    checkWebPageContent: (url, profile_name=null) ->\n        web_infos = @_request url, 'GET', null, profile_name\n        await web_infos.then (infos) ->\n            return { status: infos.status, data: infos.data }\n        .catch ( error ) ->\n            return null\n\n    # Check if remote site has client authentication enforced\n    # return boolean()\n    checkClientAuthentication: (host, port) ->\n        # Try a connection without profile\n        tls_infos = @_checkTLS host, port\n        await tls_infos.then (infos) ->\n            # Return if can connect without certs\n            return (not infos.authorized)\n        .catch ( error ) ->\n            return Error err\n\n    # Retrieve vulnerabilities based on app/version infos\n    # Based on vulners.io service (use config for API key)\n    checkVulnerabilities: (app, version) ->"
  ]
}